// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/board/proto/board/board_service.proto

package board

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/ygpark2/mboard/service/board/proto/entities"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BoardService service

func NewBoardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BoardService service

type BoardService interface {
	Exist(ctx context.Context, in *ExistRequest, opts ...client.CallOption) (*ExistResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type boardService struct {
	c    client.Client
	name string
}

func NewBoardService(name string, c client.Client) BoardService {
	return &boardService{
		c:    c,
		name: name,
	}
}

func (c *boardService) Exist(ctx context.Context, in *ExistRequest, opts ...client.CallOption) (*ExistResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.Exist", in)
	out := new(ExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "BoardService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BoardService service

type BoardServiceHandler interface {
	Exist(context.Context, *ExistRequest, *ExistResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterBoardServiceHandler(s server.Server, hdlr BoardServiceHandler, opts ...server.HandlerOption) error {
	type boardService interface {
		Exist(ctx context.Context, in *ExistRequest, out *ExistResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type BoardService struct {
		boardService
	}
	h := &boardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BoardService{h}, opts...))
}

type boardServiceHandler struct {
	BoardServiceHandler
}

func (h *boardServiceHandler) Exist(ctx context.Context, in *ExistRequest, out *ExistResponse) error {
	return h.BoardServiceHandler.Exist(ctx, in, out)
}

func (h *boardServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.BoardServiceHandler.List(ctx, in, out)
}

func (h *boardServiceHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.BoardServiceHandler.Get(ctx, in, out)
}

func (h *boardServiceHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.BoardServiceHandler.Create(ctx, in, out)
}

func (h *boardServiceHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.BoardServiceHandler.Update(ctx, in, out)
}

func (h *boardServiceHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.BoardServiceHandler.Delete(ctx, in, out)
}
